services:
  db:
    image: postgres
    container_name: database
    restart: always
    environment:
      POSTGRES_USER: user # change if necessary
      POSTGRES_PASSWORD: password # change if necessary
      POSTGRES_DB: mydatabase # change if necessary
    ports:
      - "5432:5432" 
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 1s
      timeout: 5s
      retries: 10
    volumes:
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
  
  flask-server:
    build:
      context: ./flask
      dockerfile: Dockerfile.flask
    ports:
      - "5000:5000"
    environment:
      - FLASK_ENV=development
      - FLASK_APP=app.py
    privileged: true
    devices:
      - "/dev/cpu:/dev/cpu"
    networks:
      - app-network

  flask-requests:
    build:
      context: ./flask
      dockerfile: Dockerfile.requests
    depends_on:
      - flask-server
    networks:
      - app-network
    privileged: true
    volumes:
      - ./flask:/flask
    init: true
    devices:
      - "/dev/cpu:/dev/cpu"

networks:
  app-network:
    driver: bridge

  # express:
  #   build: ./express
  #   ports:
  #     - "3000:3000"
  #   environment:
  #     - NODE_ENV=production
  #   privileged: true
  #   devices:
  #     - "/dev/cpu:/dev/cpu"

  # springboot:
  #   build: ./springboot
  #   ports:
  #     - "8080:8080"
  #   environment:
  #     SPRING_DATASOURCE_URL: jdbc:mysql://db:3306/mydb
  #     SPRING_DATASOURCE_USERNAME: root
  #     SPRING_DATASOURCE_PASSWORD: password
  #   privileged: true
  #   devices:
  #     - "/dev/cpu:/dev/cpu"
  #   command: mvn clean package && java -jar target/*.jar